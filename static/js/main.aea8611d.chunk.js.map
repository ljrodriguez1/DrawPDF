{"version":3,"sources":["components/draw.js","App.js","serviceWorker.js","index.js"],"names":["DrawArea","state","paths","isDrawing","top","left","rect","ReactDOM","findDOMNode","this","refs","canvas","getBoundingClientRect","setState","concat","e","x","pageX","y","pageY","slice","length","push","map","_points","path","points","p1","p2","end","i","filter","p","style","border","cursor","width","height","ref","onMouseDown","handleMouseDown","bind","onMouseUp","handleMouseUp","onMouseMove","handleMouseMove","xlinkHref","key","stroke","strokeWidth","d","fill","React","Component","App","className","Boolean","window","location","hostname","match","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kOAoGeA,G,wDA3Fb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,MAAO,CAAE,IACTC,WAAW,EACXC,IAAK,EACLC,KAAM,GANI,E,gEAWZ,IACMC,EADOC,IAASC,YAAYC,KAAKC,KAAKC,QAC1BC,wBACVP,EAAcC,EAAdD,KAAMD,EAAQE,EAARF,IACdK,KAAKI,SAAS,CAAET,MAAKC,W,wCAKhBI,KAAKR,MAAME,WACdM,KAAKI,SAAS,CACZX,MAAO,GAAGY,OAAOL,KAAKR,MAAMC,MAAO,CAAC,OAGxCO,KAAKI,SAAS,CAAEV,WAAW,M,sCAGbY,GACd,GAAIN,KAAKR,MAAME,UAAW,CACxB,IAAMa,EAAID,EAAEE,MAAQR,KAAKR,MAAMI,KACzBa,EAAIH,EAAEI,MAAQV,KAAKR,MAAMG,IACzBF,EAAQO,KAAKR,MAAMC,MAAMkB,MAAM,GAClBlB,EAAMA,EAAMmB,OAAS,GAC7BC,KAAK,CAAEN,IAAGE,MACrBT,KAAKI,SAAS,CAAEX,a,sCAKdO,KAAKR,MAAME,WACbM,KAAKI,SAAS,CAAEV,WAAW,M,+BAK7B,IAAMD,EAAQO,KAAKR,MAAMC,MAAMqB,KAAI,SAAAC,GACjC,IAAIC,EAAO,GACPC,EAASF,EAAQJ,MAAM,GAC3B,GAAIM,EAAOL,OAAS,EAAG,CAErB,IAAIM,EAAIC,EAAIC,EADZJ,EAAI,YAAQC,EAAO,GAAGV,EAAlB,YAAuBU,EAAO,GAAGR,GAErC,IAAK,IAAIY,EAAI,EAAGA,EAAIJ,EAAOL,OAAS,EAAGS,GAAK,EAC1CH,EAAKD,EAAOI,GACZF,EAAKF,EAAOI,EAAI,GAChBD,EAAMH,EAAOI,EAAI,GACjBL,GAAI,aAAUE,EAAGX,EAAb,YAAkBW,EAAGT,EAArB,aAA2BU,EAAGZ,EAA9B,YAAmCY,EAAGV,EAAtC,aAA4CW,EAAIb,EAAhD,YAAqDa,EAAIX,GAGjE,OAAOO,KACNM,QAAO,SAAAC,GAAC,MAAU,KAANA,KACf,OACE,6BACE,8CACA,6BACA,yBACEC,MAAO,CAAEC,OAAQ,kBAAmBC,OAAQ,aAC5CC,MAAO,IACPC,OAAQ,IACRC,IAAI,SACJC,YAAa9B,KAAK+B,gBAAgBC,KAAKhC,MACvCiC,UAAWjC,KAAKkC,cAAcF,KAAKhC,MACnCmC,YAAanC,KAAKoC,gBAAgBJ,KAAKhC,OAEvC,2BAAOO,EAAG,EAAGE,EAAG,EAAG4B,UA7EhB,4HA6EiCT,OAAQ,IAAKD,MAAO,MAEtDlC,EAAMqB,KAAI,SAAAE,GACR,OAAQ,0BACNsB,IAAKtB,EACLuB,OAAO,OACPC,YAAa,EACbC,EAAGzB,EACH0B,KAAK,kB,GAnFEC,IAAMC,YCMdC,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNrD,IAASsD,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.aea8611d.chunk.js","sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom';\nimport { simplify } from 'simplify'\n\n\nconst _url = \"https://upload.wikimedia.org/wikipedia/commons/thumb/6/66/Cephalometric_radiograph.JPG/600px-Cephalometric_radiograph.JPG\";\n\nclass DrawArea extends React.Component {\n  \n  constructor() {\n    super();\n    this.state = {\n      paths: [ [] ],\n      isDrawing: false,\n      top: 0,\n      left: 0,\n    };\n  }\n  \n  componentDidMount() {\n    const node = ReactDOM.findDOMNode(this.refs.canvas);\n    const rect = node.getBoundingClientRect();\n    const { left, top } = rect;\n    this.setState({ top, left });\n  }\n\n    \n  handleMouseDown() {\n    if (!this.state.isDrawing) {\n      this.setState({\n        paths: [].concat(this.state.paths, [[]])\n      });\n    }\n    this.setState({ isDrawing: true });\n  };\n  \n  handleMouseMove(e) {\n    if (this.state.isDrawing) {\n      const x = e.pageX - this.state.left;\n      const y = e.pageY - this.state.top;\n      const paths = this.state.paths.slice(0);\n      const activePath = paths[paths.length - 1];\n      activePath.push({ x, y });\n      this.setState({ paths });\n    }\n  };\n  \n  handleMouseUp() {\n    if (this.state.isDrawing) {\n      this.setState({ isDrawing: false });\n    }\n  };\n  \n  render() {\n    const paths = this.state.paths.map(_points => {\n      let path = '';\n      let points = _points.slice(0);\n      if (points.length > 0) {\n        path = `M ${points[0].x} ${points[0].y}`;\n        var p1, p2, end;\n        for (var i = 1; i < points.length - 2; i += 2) {\n          p1 = points[i];\n          p2 = points[i + 1];\n          end = points[i + 2];\n          path += ` C ${p1.x} ${p1.y}, ${p2.x} ${p2.y}, ${end.x} ${end.y}`;\n        }\n      }\n      return path;\n    }).filter(p => p !== '');\n    return (\n      <div>\n        <h1>Draw something</h1>\n        <br />\n        <svg\n          style={{ border: '1px solid black', cursor: 'crosshair' }}\n          width={600}\n          height={480}\n          ref=\"canvas\"\n          onMouseDown={this.handleMouseDown.bind(this)}\n          onMouseUp={this.handleMouseUp.bind(this)}\n          onMouseMove={this.handleMouseMove.bind(this)}\n         >\n          <image x={0} y={0} xlinkHref={_url} height={480} width={600} />\n          {\n            paths.map(path => {\n              return (<path\n                key={path}\n                stroke=\"blue\"\n                strokeWidth={2}\n                d={path}\n                fill=\"none\"\n              />);\n            })\n          }\n        </svg>\n      </div>\n    );\n  }\n}\n\nexport default DrawArea","import React from 'react';\nimport './App.css';\n\nimport DrawArea from './components/draw'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <DrawArea></DrawArea>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}